package Visual;


import Visual.AICanvas;
import Visual.CGame;
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Drawer.java
 *
 * Created on Apr 10, 2010, 11:38:08 PM
 */
import java.awt.Container;
import java.awt.Dimension;
import java.io.FileNotFoundException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;



/**
 *
 * @author Danich
 */
public class Drawer extends JFrame {
    CGame Game;
    Container con;
    AICanvas Canvas;


    public Drawer(CGame _Game) {
       
        Game = _Game;
        float d = Game.getElementSize();
        Canvas = new AICanvas(_Game);

        setBounds(0,0,1,1);// set frame
        initComponents();
        setMinimumSize(new Dimension(jPanel1.getWidth(), getHeight()));
        //setBounds(getX(), getY(), jPanel1.getWidth(), getHeight());
        con=this.getContentPane(); // inherit main frame
        
        con.setBackground(CGame.BackGroundColor);        // paint background
        //this.setBounds(900, 80, jPanel2.getHeight(), jPanel2.getHeight()+jPlayButton.getHeight()+ this.jSlider1.getHeight()+jPanel1.getHeight()+jMenuBar1.getHeight()+40);

        if (Visual.CVisualizer.WindowBounds != null) this.setBounds(Visual.CVisualizer.WindowBounds);
        Game.ResizeGame(jPanel2.getWidth(),jPanel2.getHeight());
        setTitle("Ai Project");

        jSlider1.setMaximum(CGame.MaxSpeed);//if you change then chang too in canvas thred when game.t ++
        jSlider1.setMinimum(1);
        jSlider1.setValue(CGame.MaxSpeed/4);

        setVisible(true);// add to frame and show
    }
    public void DisplayInfo()
    {
        this.jTurnNumberLabel.setText(" Turn: "+Game.getCurrenTurnToDisplay());
        this.jDirectionLabel.setText(" Dir: "+Game.getGameDirection());
        this.jTimeLabel.setText(" Time: "+String.format("%.2f", Game.getT()) );
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTurnNumberLabel = new javax.swing.JLabel();
        jRobotNumberLabel = new javax.swing.JLabel();
        jDirectionLabel = new javax.swing.JLabel();
        jTimeLabel = new javax.swing.JLabel();
        jXLabel = new javax.swing.JLabel();
        jYLabel = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();
        jPanel2 = Canvas;
        jPanel1 = new javax.swing.JPanel();
        jPrevButton = new javax.swing.JButton();
        jNextButton = new javax.swing.JButton();
        jPlayButton = new javax.swing.JButton();
        jRewindButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jFileMenu = new javax.swing.JMenu();
        jOpenInNewWindowMenuItem = new javax.swing.JMenuItem();
        jOpenMenuItem = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jShowNamesCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        jShowHealthCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        jMuteCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jIncreaseSpeedMenuItem = new javax.swing.JMenuItem();
        jNoramlSpeedMenuItem = new javax.swing.JMenuItem();
        jDecreaseSpeedMenuItem = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jGoToTurnMenuItem = new javax.swing.JMenuItem();
        jNextMenuItem = new javax.swing.JMenuItem();
        jPreviousMenuItem = new javax.swing.JMenuItem();
        jPlayMenuItem = new javax.swing.JMenuItem();
        jRewindMenuItem = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jOpenDisplayMenuItem = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jShowByTurnsMenuItem = new javax.swing.JMenuItem();
        jShowTurnNMenuItem = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jShowAllRobotsActivityMenuItem = new javax.swing.JMenuItem();
        jShowRobotNActivityMenuItem = new javax.swing.JMenuItem();
        jShowRobotNActivityInTurnNMenuItem = new javax.swing.JMenuItem();
        jShowAllRobotsCodeMenuItem = new javax.swing.JMenuItem();
        jShowRobotsNCodeMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("sdfsdfsdf");
        setBounds(new java.awt.Rectangle(900, 80, 334, 465));
        setMinimumSize(new java.awt.Dimension(334, 475));
        setName("Form"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowDeactivated(java.awt.event.WindowEvent evt) {
                formWindowDeactivated(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        jTurnNumberLabel.setText("Turn: 100");
        jTurnNumberLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jTurnNumberLabel.setName("jTurnNumberLabel"); // NOI18N

        jRobotNumberLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jRobotNumberLabel.setText("Element #");
        jRobotNumberLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jRobotNumberLabel.setName("jRobotNumberLabel"); // NOI18N

        jDirectionLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jDirectionLabel.setText("Dir: -1");
        jDirectionLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jDirectionLabel.setName("jDirectionLabel"); // NOI18N

        jTimeLabel.setText("Time: 1.00");
        jTimeLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jTimeLabel.setName("jTimeLabel"); // NOI18N

        jXLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jXLabel.setText("X:0");
        jXLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jXLabel.setAutoscrolls(true);
        jXLabel.setName("jXLabel"); // NOI18N

        jYLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jYLabel.setText("Y:0");
        jYLabel.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jYLabel.setName("jYLabel"); // NOI18N

        jSlider1.setAlignmentX(0.0F);
        jSlider1.setAlignmentY(0.0F);
        jSlider1.setAutoscrolls(true);
        jSlider1.setName("jSlider1"); // NOI18N
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jPanel2.setMinimumSize(new java.awt.Dimension(334, 334));
        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setPreferredSize(new java.awt.Dimension(334, 355));
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel2MouseClicked(evt);
            }
        });
        jPanel2.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jPanel2ComponentResized(evt);
            }
        });
        jPanel2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel2MouseDragged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 365, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 346, Short.MAX_VALUE)
        );

        jPanel1.setMinimumSize(new java.awt.Dimension(334, 29));
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(334, 29));

        jPrevButton.setText("Prev");
        jPrevButton.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jPrevButton.setMinimumSize(new java.awt.Dimension(10, 29));
        jPrevButton.setName("jPrevButton"); // NOI18N
        jPrevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPrevButtonActionPerformed(evt);
            }
        });

        jNextButton.setText("Next");
        jNextButton.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jNextButton.setMinimumSize(new java.awt.Dimension(10, 29));
        jNextButton.setName("jNextButton"); // NOI18N
        jNextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNextButtonActionPerformed(evt);
            }
        });

        jPlayButton.setText("Play");
        jPlayButton.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jPlayButton.setMinimumSize(new java.awt.Dimension(10, 29));
        jPlayButton.setName("jPlayButton"); // NOI18N
        jPlayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPlayButtonActionPerformed(evt);
            }
        });

        jRewindButton.setText("Rewind");
        jRewindButton.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jRewindButton.setMinimumSize(new java.awt.Dimension(10, 29));
        jRewindButton.setName("jRewindButton"); // NOI18N
        jRewindButton.setPreferredSize(new java.awt.Dimension(79, 29));
        jRewindButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRewindButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPrevButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                .add(jNextButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                .add(jPlayButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jRewindButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPrevButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(jNextButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(jPlayButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jRewindButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        jMenuBar1.setName("jMenuBar1"); // NOI18N

        jFileMenu.setText("File");
        jFileMenu.setName("jFileMenu"); // NOI18N

        jOpenInNewWindowMenuItem.setText("Open in New Window");
        jOpenInNewWindowMenuItem.setName("jOpenInNewWindowMenuItem"); // NOI18N
        jOpenInNewWindowMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOpenInNewWindowMenuItemActionPerformed(evt);
            }
        });
        jFileMenu.add(jOpenInNewWindowMenuItem);

        jOpenMenuItem.setText("Open");
        jOpenMenuItem.setName("jOpenMenuItem"); // NOI18N
        jOpenMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOpenMenuItemActionPerformed(evt);
            }
        });
        jFileMenu.add(jOpenMenuItem);

        jMenuItem1.setText("Map Editor");
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jFileMenu.add(jMenuItem1);

        jMenuBar1.add(jFileMenu);

        jMenu2.setText("Game");
        jMenu2.setName("jMenu2"); // NOI18N

        jShowNamesCheckBoxMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, 0));
        jShowNamesCheckBoxMenuItem.setText("Show Names");
        jShowNamesCheckBoxMenuItem.setName("jShowNamesCheckBoxMenuItem"); // NOI18N
        jShowNamesCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jShowNamesCheckBoxMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(jShowNamesCheckBoxMenuItem);

        jShowHealthCheckBoxMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, 0));
        jShowHealthCheckBoxMenuItem.setSelected(true);
        jShowHealthCheckBoxMenuItem.setText("Show Health");
        jShowHealthCheckBoxMenuItem.setName("jShowHealthCheckBoxMenuItem"); // NOI18N
        jShowHealthCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jShowHealthCheckBoxMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(jShowHealthCheckBoxMenuItem);

        jMuteCheckBoxMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, 0));
        jMuteCheckBoxMenuItem.setText("Mute");
        jMuteCheckBoxMenuItem.setName("jMuteCheckBoxMenuItem"); // NOI18N
        jMuteCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMuteCheckBoxMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(jMuteCheckBoxMenuItem);

        jMenuItem3.setText("Reanalyse Speed");
        jMenuItem3.setName("jMenuItem3"); // NOI18N
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jIncreaseSpeedMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_EQUALS, 0));
        jIncreaseSpeedMenuItem.setText("Increase Speed");
        jIncreaseSpeedMenuItem.setName("jIncreaseSpeedMenuItem"); // NOI18N
        jIncreaseSpeedMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jIncreaseSpeedMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(jIncreaseSpeedMenuItem);

        jNoramlSpeedMenuItem.setText("Normal Speed");
        jNoramlSpeedMenuItem.setName("jNoramlSpeedMenuItem"); // NOI18N
        jNoramlSpeedMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNoramlSpeedMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(jNoramlSpeedMenuItem);

        jDecreaseSpeedMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_MINUS, 0));
        jDecreaseSpeedMenuItem.setText("Decrease Speed");
        jDecreaseSpeedMenuItem.setName("jDecreaseSpeedMenuItem"); // NOI18N
        jDecreaseSpeedMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDecreaseSpeedMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(jDecreaseSpeedMenuItem);

        jMenuBar1.add(jMenu2);

        jMenu5.setText("Controls");
        jMenu5.setName("jMenu5"); // NOI18N

        jGoToTurnMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        jGoToTurnMenuItem.setText("Go to Turn");
        jGoToTurnMenuItem.setName("jGoToTurnMenuItem"); // NOI18N
        jGoToTurnMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jGoToTurnMenuItemActionPerformed(evt);
            }
        });
        jMenu5.add(jGoToTurnMenuItem);

        jNextMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_RIGHT, 0));
        jNextMenuItem.setText("Next");
        jNextMenuItem.setName("jNextMenuItem"); // NOI18N
        jNextMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNextMenuItemActionPerformed(evt);
            }
        });
        jMenu5.add(jNextMenuItem);

        jPreviousMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_LEFT, 0));
        jPreviousMenuItem.setText("Previous");
        jPreviousMenuItem.setName("jPreviousMenuItem"); // NOI18N
        jPreviousMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPreviousMenuItemActionPerformed(evt);
            }
        });
        jMenu5.add(jPreviousMenuItem);

        jPlayMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, 0));
        jPlayMenuItem.setText("Play");
        jPlayMenuItem.setName("jPlayMenuItem"); // NOI18N
        jPlayMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPlayMenuItemActionPerformed(evt);
            }
        });
        jMenu5.add(jPlayMenuItem);

        jRewindMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, 0));
        jRewindMenuItem.setText("Rewind");
        jRewindMenuItem.setName("jRewindMenuItem"); // NOI18N
        jRewindMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRewindMenuItemActionPerformed(evt);
            }
        });
        jMenu5.add(jRewindMenuItem);

        jMenuBar1.add(jMenu5);

        jMenu1.setText("Display");
        jMenu1.setName("jMenu1"); // NOI18N

        jOpenDisplayMenuItem.setText("Open");
        jOpenDisplayMenuItem.setName("jOpenDisplayMenuItem"); // NOI18N
        jOpenDisplayMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOpenDisplayMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(jOpenDisplayMenuItem);

        jMenu3.setText("Turn");
        jMenu3.setName("jMenu3"); // NOI18N

        jShowByTurnsMenuItem.setText("Show by Turns");
        jShowByTurnsMenuItem.setName("jShowByTurnsMenuItem"); // NOI18N
        jShowByTurnsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jShowByTurnsMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(jShowByTurnsMenuItem);

        jShowTurnNMenuItem.setText("Show Turn #");
        jShowTurnNMenuItem.setName("jShowTurnNMenuItem"); // NOI18N
        jShowTurnNMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jShowTurnNMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(jShowTurnNMenuItem);

        jMenu1.add(jMenu3);

        jMenu4.setText("Robot");
        jMenu4.setName("jMenu4"); // NOI18N

        jShowAllRobotsActivityMenuItem.setText("Show All Robots' Activity");
        jShowAllRobotsActivityMenuItem.setName("jShowAllRobotsActivityMenuItem"); // NOI18N
        jShowAllRobotsActivityMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jShowAllRobotsActivityMenuItemActionPerformed(evt);
            }
        });
        jMenu4.add(jShowAllRobotsActivityMenuItem);

        jShowRobotNActivityMenuItem.setText("Show Robot's # Activity");
        jShowRobotNActivityMenuItem.setName("jShowRobotNActivityMenuItem"); // NOI18N
        jShowRobotNActivityMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jShowRobotNActivityMenuItemActionPerformed(evt);
            }
        });
        jMenu4.add(jShowRobotNActivityMenuItem);

        jShowRobotNActivityInTurnNMenuItem.setText("Show Robot's # Activity in Turn #");
        jShowRobotNActivityInTurnNMenuItem.setName("jShowRobotNActivityInTurnNMenuItem"); // NOI18N
        jShowRobotNActivityInTurnNMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jShowRobotNActivityInTurnNMenuItemActionPerformed(evt);
            }
        });
        jMenu4.add(jShowRobotNActivityInTurnNMenuItem);

        jShowAllRobotsCodeMenuItem.setText("Show All Robots' Code");
        jShowAllRobotsCodeMenuItem.setName("jShowAllRobotsCodeMenuItem"); // NOI18N
        jShowAllRobotsCodeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jShowAllRobotsCodeMenuItemActionPerformed(evt);
            }
        });
        jMenu4.add(jShowAllRobotsCodeMenuItem);

        jShowRobotsNCodeMenuItem.setText("Show Robot's # Code");
        jShowRobotsNCodeMenuItem.setName("jShowRobotsNCodeMenuItem"); // NOI18N
        jShowRobotsNCodeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jShowRobotsNCodeMenuItemActionPerformed(evt);
            }
        });
        jMenu4.add(jShowRobotsNCodeMenuItem);

        jMenu1.add(jMenu4);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jTurnNumberLabel)
                .add(4, 4, 4)
                .add(jRobotNumberLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 71, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(4, 4, 4)
                .add(jXLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(4, 4, 4)
                .add(jYLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(4, 4, 4)
                .add(jDirectionLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTimeLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 86, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(jSlider1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
            .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSlider1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE, false)
                    .add(jTurnNumberLabel)
                    .add(jTimeLabel)
                    .add(jRobotNumberLabel)
                    .add(jXLabel)
                    .add(jYLabel)
                    .add(jDirectionLabel)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void setTextPlayButton(boolean isPlay)
    {
        if (isPlay)
        {
            jPlayButton.setText("Stop");
            jPlayMenuItem.setText("Stop");
        } else
        {
            jPlayButton.setText("Play");
            jPlayMenuItem.setText("Play");
        }
    }
    private void jNextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNextButtonActionPerformed
//
//        JLabel label = new JLabel(icon);
//
//        //JFrame f = new JFrame("Animation");
//        //f.getContentPane().add(label);
//        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//        f.pack();
//        f.setLocationRelativeTo(null);
//        f.setVisible(true);

        if((Game.isPlay() || Game.isTransition() || (Game.getCurrenTurnToDisplay() == Game.getTurnCount()-1) || (Game.getCurrenTurnToDisplay() == 1))&&(Game.getGameDirection() < 0))
        {
            Game.setPlay(false);
            Game.ChangeDirection();
            Game.setT(1+Game.getT());
            Game.setTransition(true); //when current turn == 1 it can be false;
            
            System.out.println("afected right pressed");
            return;
        }
        if (Game.getCurrenTurnToDisplay() + 1 < Game.getTurnCount())
        {
            Game.setT(0);
            if (Game.getGameDirection() > 0)
            {
                Game.setCurrenTurnToDisplay(Game.getCurrenTurnToDisplay()+1);
            }
            Game.ChangeDirection(1);
            Game.setTransition(true);

            System.out.println("afected right pressed");
        }
        System.out.println("right pressed");

    }//GEN-LAST:event_jNextButtonActionPerformed

    private void jPrevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPrevButtonActionPerformed
        if((Game.isPlay() || Game.isTransition() || (Game.getCurrenTurnToDisplay() == Game.getTurnCount()-1) || (Game.getCurrenTurnToDisplay() == 1))&&(Game.getGameDirection() > 0))
        {
            Game.setPlay(false);
            Game.setT((1 - Game.getT())*-1);
            Game.ChangeDirection();
            Game.setTransition(true); //when current turn == 1 it can be false;

            System.out.println("afected left pressed");
            return;
            
        }
        if (Game.getCurrenTurnToDisplay()-1 >= 1)
        {
            Game.setT(0);
            if (Game.getGameDirection() < 0)
            {
                Game.setCurrenTurnToDisplay(Game.getCurrenTurnToDisplay()-1);
            }
            Game.ChangeDirection(-1);
            Game.setTransition(true);
            
            System.out.println("afected left pressed");
        }
        System.out.println("left pressed");
    }//GEN-LAST:event_jPrevButtonActionPerformed

    private void jPlayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPlayButtonActionPerformed
        if (!Game.isPlay())
        {

            if (Game.getGameDirection() < 0)
            {
                Game.setPlay(true);
                Game.ChangeDirection();
                Game.setT(1+Game.getT());
                Game.setTransition(true);
            }
            if (Game.getCurrenTurnToDisplay()+1 < Game.getTurnCount())
            {
                Game.setPlay(true);
            }
        } else
        {
            Game.setPlay(false);
        }
        

    }//GEN-LAST:event_jPlayButtonActionPerformed

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        Game.setSpeed((float)jSlider1.getValue()/(float)(jSlider1.getMaximum()));
        if (jSlider1.getValue() == jSlider1.getMaximum())
        {
            Game.setSpeed(1);
        }else
        {
            //Game.Speed = Game.Speed*Game.Speed*Game.Speed;
            Game.setSpeed(1.0f - (float)Math.sqrt(4.0f-4.0f*(float)Game.getSpeed()*(float)(Game.getSpeed()))/2.0f);
            //Game.Speed = Game.Speed/23;
        }
        //System.out.println("speed = "+Game.Speed);
    }//GEN-LAST:event_jSlider1StateChanged

    private void jRewindButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRewindButtonActionPerformed
            Game.setPlay(false);
            Game.setCurrenTurnToDisplay(1);
            Game.setT(-1);
            Game.setGameDirection(-1);
            System.out.println("afected revert pressed");
            return;
    }//GEN-LAST:event_jRewindButtonActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized

}//GEN-LAST:event_formComponentResized

    private void jPanel2ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel2ComponentResized
        Game.ResizeGame(jPanel2.getWidth(),jPanel2.getHeight());
    }//GEN-LAST:event_jPanel2ComponentResized

    private void jGoToTurnMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jGoToTurnMenuItemActionPerformed
        Game.setPlay(false);
        int turn;
        do
        {
            turn = Integer.valueOf(JOptionPane.showInputDialog("Type in turn number "+1+" - "+(Game.getTurnCount()-1),"1"));
        } while ((turn < 1)||(turn > Game.getTurnCount()-1));
        Game.setCurrenTurnToDisplay(turn);
        Game.setT(-1);
        Game.ChangeDirection(-1);
        Game.setTransition(true);
        
        
        System.out.println("afected go to turn pressed");
    }//GEN-LAST:event_jGoToTurnMenuItemActionPerformed

    private void jNextMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNextMenuItemActionPerformed
        jNextButtonActionPerformed(evt);
    }//GEN-LAST:event_jNextMenuItemActionPerformed

    private void jRewindMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRewindMenuItemActionPerformed
        jRewindButtonActionPerformed(evt);
    }//GEN-LAST:event_jRewindMenuItemActionPerformed

    private void jPlayMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPlayMenuItemActionPerformed
        jPlayButtonActionPerformed(evt);
    }//GEN-LAST:event_jPlayMenuItemActionPerformed

    private void jPreviousMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPreviousMenuItemActionPerformed
        jPrevButtonActionPerformed(evt);
    }//GEN-LAST:event_jPreviousMenuItemActionPerformed

    private void jIncreaseSpeedMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jIncreaseSpeedMenuItemActionPerformed
        jSlider1.setValue(jSlider1.getValue()+1);
    }//GEN-LAST:event_jIncreaseSpeedMenuItemActionPerformed

    private void jDecreaseSpeedMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDecreaseSpeedMenuItemActionPerformed
        jSlider1.setValue(jSlider1.getValue()-1);
    }//GEN-LAST:event_jDecreaseSpeedMenuItemActionPerformed

    private void jOpenInNewWindowMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOpenInNewWindowMenuItemActionPerformed
        CVisualizer.SaveWindowBounds(getX(),getY(),getWidth(),getHeight());
        try {
            CVisualizer.mainGame.add(new CGame(CGame.Visualizer));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Drawer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jOpenInNewWindowMenuItemActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        SoundEffect.Mute = true;
        Visual.CVisualizer.mainGame.remove(Game);
        //if (Visual.CVisualizer.mainGame.size() == 0) System.exit(0);
    }//GEN-LAST:event_formWindowClosed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        Canvas.SpeedAnalisisList.clear();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jPanel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseClicked
        CGameObject Element = Game.FindElementHereXY(evt.getX(), evt.getY());
        if (Element == null) 
        {
            jRobotNumberLabel.setText("Nothing");
            return;
        } else
        {
            jRobotNumberLabel.setText(Element.TypeName +" #"+ Element.Number);
            jXLabel.setText("X:"+String.format("%.0f", Element.X));
            jYLabel.setText("Y:"+String.format("%.0f", Element.Y));
        }

        if(evt.isShiftDown() && Element.TypeId == CGameObject.ROBOT)
        {
            Game.DisplayForThisRobotTurnsAroundCurrent(Element.Number,4,Game.CreateDisplay());
        }
        if(evt.isControlDown() && Element.TypeId == CGameObject.ROBOT)
        {
            Game.DisplayForThisTurnAllRobots(Game.getCurrenTurnToDisplay(),Game.CreateDisplay());
        }
        if(evt.isAltDown() && Element.TypeId == CGameObject.ROBOT)
        {
            Game.DisplayRobotsCode(Element.Number,Game.CreateDisplay());
        }
        
    }//GEN-LAST:event_jPanel2MouseClicked

    private void jOpenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOpenMenuItemActionPerformed
        jOpenInNewWindowMenuItemActionPerformed(evt);
        dispose();
        Visual.CVisualizer.mainGame.remove(Game);
        if (Visual.CVisualizer.mainGame.size() == 0) System.exit(0);
    }//GEN-LAST:event_jOpenMenuItemActionPerformed

    private void jOpenDisplayMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOpenDisplayMenuItemActionPerformed
        Game.CreateDisplay();
    }//GEN-LAST:event_jOpenDisplayMenuItemActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        Game.OpenMapEditor();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        Game.PaintingEnabled(true);
    }//GEN-LAST:event_formWindowActivated

    private void formWindowDeactivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeactivated
        Game.PaintingEnabled(false);
    }//GEN-LAST:event_formWindowDeactivated

    private void jPanel2MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseDragged
        jPanel2MouseClicked(evt);
    }//GEN-LAST:event_jPanel2MouseDragged

    private void jShowNamesCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jShowNamesCheckBoxMenuItemActionPerformed
        Game.setShowNames(jShowNamesCheckBoxMenuItem.isSelected());
    }//GEN-LAST:event_jShowNamesCheckBoxMenuItemActionPerformed

    private void jShowHealthCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jShowHealthCheckBoxMenuItemActionPerformed
        Game.setShowHealth(jShowHealthCheckBoxMenuItem.isSelected());
    }//GEN-LAST:event_jShowHealthCheckBoxMenuItemActionPerformed

    private void jShowByTurnsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jShowByTurnsMenuItemActionPerformed
        Game.DisplayByTurns(Game.CreateDisplay());
}//GEN-LAST:event_jShowByTurnsMenuItemActionPerformed

    private void jShowTurnNMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jShowTurnNMenuItemActionPerformed
        int turn;
        do
        {
            turn = Integer.valueOf(JOptionPane.showInputDialog("Type in turn number "+1+" - "+Game.getTurnCount(),"1"));
        } while ((turn < 1)||(turn > Game.getTurnCount()));
        Game.DisplayForThisTurnAllRobots(turn, Game.CreateDisplay());
    }//GEN-LAST:event_jShowTurnNMenuItemActionPerformed

    private void jShowAllRobotsActivityMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jShowAllRobotsActivityMenuItemActionPerformed
        Game.DisplayByRobots(Game.CreateDisplay());
}//GEN-LAST:event_jShowAllRobotsActivityMenuItemActionPerformed

    private void jShowRobotNActivityMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jShowRobotNActivityMenuItemActionPerformed
        int RobotNumber;
        do
        {
            RobotNumber = Integer.valueOf(JOptionPane.showInputDialog("Type in Robot number "+0+" - "+Game.getRobotCount(),"0"));
        } while ((RobotNumber < 0)||(RobotNumber > Game.getRobotCount()));
        Game.DisplayForThisRobotTurnsAroundCurrent(RobotNumber,0, Game.CreateDisplay());
    }//GEN-LAST:event_jShowRobotNActivityMenuItemActionPerformed

    private void jShowRobotNActivityInTurnNMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jShowRobotNActivityInTurnNMenuItemActionPerformed
        int RobotNumber;
        do
        {
            RobotNumber = Integer.valueOf(JOptionPane.showInputDialog("Type in Robot number "+0+" - "+Game.getRobotCount(),"0"));
        } while ((RobotNumber < 0)||(RobotNumber > Game.getRobotCount()));
        int TurnNumber;
        do
        {
            TurnNumber = Integer.valueOf(JOptionPane.showInputDialog("Type in Turn number "+1+" - "+Game.getTurnCount(),"1"));
        } while ((TurnNumber < 1)||(TurnNumber > Game.getTurnCount()));
        Game.DisplayForThisRobotTurnsAroundGiven(RobotNumber,TurnNumber,1, Game.CreateDisplay());
    }//GEN-LAST:event_jShowRobotNActivityInTurnNMenuItemActionPerformed

    private void jShowAllRobotsCodeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jShowAllRobotsCodeMenuItemActionPerformed
        Game.DisplayCodeOfAllRobots(Game.CreateDisplay());
}//GEN-LAST:event_jShowAllRobotsCodeMenuItemActionPerformed

    private void jShowRobotsNCodeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jShowRobotsNCodeMenuItemActionPerformed
        int RobotNumber;
        do
        {
            RobotNumber = Integer.valueOf(JOptionPane.showInputDialog("Type in Robot number "+0+" - "+Game.getRobotCount(),"0"));
        } while ((RobotNumber < 0)||(RobotNumber > Game.getRobotCount()));
        Game.DisplayRobotsCode(RobotNumber, Game.CreateDisplay());
}//GEN-LAST:event_jShowRobotsNCodeMenuItemActionPerformed

    private void jMuteCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMuteCheckBoxMenuItemActionPerformed
        SoundEffect.Mute = jMuteCheckBoxMenuItem.isSelected();
    }//GEN-LAST:event_jMuteCheckBoxMenuItemActionPerformed

    private void jNoramlSpeedMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNoramlSpeedMenuItemActionPerformed
        jSlider1.setValue(CGame.MaxSpeed/4);
    }//GEN-LAST:event_jNoramlSpeedMenuItemActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem jDecreaseSpeedMenuItem;
    private javax.swing.JLabel jDirectionLabel;
    private javax.swing.JMenu jFileMenu;
    private javax.swing.JMenuItem jGoToTurnMenuItem;
    private javax.swing.JMenuItem jIncreaseSpeedMenuItem;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JCheckBoxMenuItem jMuteCheckBoxMenuItem;
    private javax.swing.JButton jNextButton;
    private javax.swing.JMenuItem jNextMenuItem;
    private javax.swing.JMenuItem jNoramlSpeedMenuItem;
    private javax.swing.JMenuItem jOpenDisplayMenuItem;
    private javax.swing.JMenuItem jOpenInNewWindowMenuItem;
    private javax.swing.JMenuItem jOpenMenuItem;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton jPlayButton;
    private javax.swing.JMenuItem jPlayMenuItem;
    private javax.swing.JButton jPrevButton;
    private javax.swing.JMenuItem jPreviousMenuItem;
    private javax.swing.JButton jRewindButton;
    private javax.swing.JMenuItem jRewindMenuItem;
    private javax.swing.JLabel jRobotNumberLabel;
    private javax.swing.JMenuItem jShowAllRobotsActivityMenuItem;
    private javax.swing.JMenuItem jShowAllRobotsCodeMenuItem;
    private javax.swing.JMenuItem jShowByTurnsMenuItem;
    private javax.swing.JCheckBoxMenuItem jShowHealthCheckBoxMenuItem;
    private javax.swing.JCheckBoxMenuItem jShowNamesCheckBoxMenuItem;
    private javax.swing.JMenuItem jShowRobotNActivityInTurnNMenuItem;
    private javax.swing.JMenuItem jShowRobotNActivityMenuItem;
    private javax.swing.JMenuItem jShowRobotsNCodeMenuItem;
    private javax.swing.JMenuItem jShowTurnNMenuItem;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JLabel jTimeLabel;
    private javax.swing.JLabel jTurnNumberLabel;
    private javax.swing.JLabel jXLabel;
    private javax.swing.JLabel jYLabel;
    // End of variables declaration//GEN-END:variables

}
